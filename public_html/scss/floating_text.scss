
@charset "UTF-8";

$version: '0.1';

/*! Version #{$version} - Made by Haddad Richard https://github.com/Chnapy */

// Functions and mixins

//Remove item from list
@function remove-nth($list, $index) {
	$result: null;

	@if type-of($index) != number {
		@warn "$index: #{quote($index)} is not a number for `remove-nth`.";
	}

	@else if $index == 0 {
		@warn "List index 0 must be a non-zero integer for `remove-nth`.";
	}

	@else if abs($index) > length($list) {
		@warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
	}

	@else {
		$result: ();
		$index: if($index < 0, length($list) + $index + 1, $index);  

		@for $i from 1 through length($list) {
			@if $i != $index {
				$result: append($result, nth($list, $i));
			}
		}
	}

	@return $result;
}

//Random mix a list
@function getCloneMixedList($list) {
	$clone_tmp: $list;
	$clone: ();
	$i: null;
	@while length($clone_tmp) > 0 {
		@if(length($clone_tmp) != 1) {
			$i: random(length($clone_tmp));
			$clone: append($clone, nth($clone_tmp, $i));
			$clone_tmp: remove-nth($clone_tmp, $i);
		} @else {
			$clone: append($clone, nth($clone_tmp, 1));
			$clone_tmp: ();
		}
	}
	//@debug $clone;
	@return $clone;
}

//Convert a list to string
@function to-string($list, $glue: '', $is-nested: false) {
	$result: null;

	@for $i from 1 through length($list) {
		$e: nth($list, $i);

		@if type-of($e) == list {
			$result: unquote("#{$result}#{to-string($e, $glue, true)}");
		}

		@else {
			$result: if($i != length($list) or $is-nested, unquote("#{$result}#{$e}#{$glue}"), unquote("#{$result}#{$e}"));
		}
	}

	@return $result;
}

//Add all prefix
@mixin wout-prefix ($key, $value) {
	-webkit-#{$key}: $value;
	-moz-#{$key}: $value;
	-o-#{$key}: $value;
	#{$key}: $value;
}

//NOT USED
//Create an animation from delay, duration and name
@mixin animation ($delay, $duration, $name) {
	@include wout-prefix(animation-delay, $delay);
	@include wout-prefix(animation-duration, $duration);
	@include wout-prefix(animation-fill-mode, forwards);
	@include wout-prefix(animation-name, $name);
}

//NOT USED
//Create an animation with multiple keyframes
@mixin multiple_animation ($delays, $durations, $all_names) {

	@if(type-of($all_names) != list) {
		$all_names: ($all_names);
	}
	@if(type-of($delays) != list) {
		$delays: ($delays);
	}
	@if(type-of($durations) != list) {
		$durations: ($durations);
	}

	$names: (nth($all_names, 1));
	$del: (nth($delays, 1));
	$dur: (nth($durations, 1));
	@if(length($all_names) > 1) {
		@for $i from 2 through length($all_names) {
			$names: append($names, unquote(",") + nth($all_names, $i));
			$del: append($del, unquote(",") + nth($delays, max($i % (length($delays)+1), 1)));
			$dur: append($dur, unquote(",") + nth($durations, max($i % (length($durations)+1), 1)));
		}
	}
	@include animation($del, $dur, $names);
}

//Create keyframe with prefix
@mixin keyframe ($animation_name) {
    @-webkit-keyframes #{$animation_name} {
        @content;
    }

    @-moz-keyframes #{$animation_name} {
        @content;
    }

    @-o-keyframes #{$animation_name} {
        @content;
    }

    @keyframes #{$animation_name} {
        @content;
    }
}

//Create a keyframe for floating text
@mixin keyFloat($name, $x, $y) {
	@include keyframe(#{$name}) {
		0%{
			@include wout-prefix(transform, translate(0,0));
		}
		50%{
			@include wout-prefix(transform, translate(#{$x}px,#{$y}px));
		}
		100%{
			@include wout-prefix(transform, translate(0,0));
		}
	}
}

//Return list with all delays
@function delays($start, $inc, $nbr) {
	$delays: ();
	@for $i from 1 through $nbr {
		$delays: append($delays, $start + $inc * ($i - 1));
	}
	@return $delays;
}

//Variables

//Names of keyframes
$float_names: (
float_top,
float_bottom,
float_left,
float_right,
float_left-top,
float_right-top,
float_left-bottom,
float_right-bottom
);

//Can be edit :

//Duration of a keyframe
$float_duration: 1s;

//Define delays of an animation
//Not recommended to edit
$float_delays: delays(0s, $float_duration, length($float_names));

//Translate value of each keyframe
$float_val: 5;

//Number of different animations
//The CSS file size depend of that
$float_number_animation: 10;

//Keyframes creations

@include keyFloat(nth($float_names, 1), -$float_val, 0);
@include keyFloat(nth($float_names, 2), $float_val, 0);
@include keyFloat(nth($float_names, 3), 0, -$float_val);
@include keyFloat(nth($float_names, 4), 0, $float_val);
@include keyFloat(nth($float_names, 5), -$float_val, -$float_val);
@include keyFloat(nth($float_names, 6), $float_val, -$float_val);
@include keyFloat(nth($float_names, 7), -$float_val, $float_val);
@include keyFloat(nth($float_names, 8), $float_val, $float_val);

/**
 * Important principle:
 * An animation is composed by one or more keyframes.
 */

.floating_text {

	.floating_text_char {
		//Not recommanded to edit
		display: inline-block;
		@include wout-prefix(animation-delay, to-string($float_delays, ","));
		@include wout-prefix(animation-duration, $float_duration);
		@include wout-prefix(animation-play-state, paused);

		//Can be edit
		@include wout-prefix(animation-direction, alternate);
		@include wout-prefix(animation-timing-function, linear);
		@include wout-prefix(animation-fill-mode, forwards);

	}

	&.run-animation .floating_text_char {
		//Not recommanded to edit
		@include wout-prefix(animation-play-state, running);

		//All $float_number_animation characters will have the same animation
		//No edit please
		@for $i from 0 through ($float_number_animation - 1) {
			&:nth-child(#{$float_number_animation}n+#{$i}){
				@include wout-prefix(animation-name, to-string(getCloneMixedList($float_names), ","));
			}
		}


	}
}



